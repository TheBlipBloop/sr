#pragma once

#include <cstddef>
#include <string>

#include <SDL3/SDL_gpu.h>
#include <shaderc/shaderc.h>

// Base class for all GLSL SPIRV shaders that are compiled at runtime into a
// SDL_GPUShader.
class Shader
{

    /************************************************************************************************/
    /** Constructors */

public:

    // Default constructor
    Shader();

    // Default deconstructor. Releases any activate cached shaders from SDL
    // device.
    ~Shader();

    /************************************************************************************************/
    /** Shader */

public:

    // Load this shader as an SDL_GPUShader instance. If @force_regenerate is
    // false, this function may return a cached shader.
    //
    // @for_device -- SDL_Device this shader will be loaded on to.
    // @force_regenerate -- When true, forces a recompilation and regeneration
    // of the shader instead of pulling from cache. Should be true if the
    // contents of the shader code have changed since last load.
    virtual SDL_GPUShader* Load(SDL_GPUDevice* for_device,
                                bool force_regenerate = false);

    /************************************************************************************************/
    /** Shader Source Code */

protected:

    // Returns a string holding the source code of a GLSL-SPIRV shader.
    virtual std::string GetShaderSourceCode() const = 0;

    // Returns the number of uniform buffers in the code returned by
    // @GetShaderSourceCode().
    virtual int GetUniformBufferCount() const = 0;

    // Returns the shader stage of code returned by
    // @GetShaderSourceCode().
    virtual SDL_GPUShaderStage GetSDLShaderStage() const = 0;

    // Returns the type of shader the code returned by
    // @GetShaderSourceCode().
    virtual shaderc_shader_kind GetShaderKind() const = 0;

    /************************************************************************************************/
    /** Compilation */

private:

    // Name of the entry function in uncompiled GLSL code.
    const std::string GLSL_ENTRY_POINT = "main";

    // Post compilation SDL compatible shader. This shader will always be active
    // on @m_shader_cache.
    SDL_GPUShader* m_shader_cache;

    // The GPU device @shaderCache was loaded to.
    SDL_GPUDevice* m_device_cache;

private:

    // Compiles the shadercode generated by @GetShaderSourceCode() and places
    // the resulting shader in an SDL_GPUShader that lives on @for_device.
    // Errors will be logged to SDL_Log.
    // @for_device -- Device to compile the shader for.
    // @out_shader -- Pointer to storage for the compiled shader.
    // @Returns -- True if compilation succeeded, false otherwise.
    bool CompileShader(SDL_GPUDevice* for_device, SDL_GPUShader** out_shader);

    // Compiles GLSL-SPIRV shader code into machine code. Errors
    // will be logged to SDL_Log.
    // @source_text -- Source code of the shader. Must be written as SPIRV
    // compatible GLSL and contain a valid entry point (see @GLSL_ENTRY_POINT).
    // @source_text_length -- Length of @source_text (bytes).
    // @out_shader_code -- Address to store the compiled shader machine code.
    // @out_shader_code_length -- Number of bytes of shader machine code
    // generated.
    // @Returns -- True if compilation succeeded, false otherwise.
    bool CompileSourceToShaderCode(const char* source_text,
                                   size_t source_text_length,
                                   char** out_shader_code,
                                   size_t* out_shader_code_length);
};
